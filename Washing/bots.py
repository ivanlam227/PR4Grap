import telebot
import config
from keyboards import MarkupBuilder
from validators import InputValidator

class WashingMachine:
    def __init__(self, brand, model, serial_number):
        self.brand = brand
        self.model = model
        self.serial_number = serial_number
        self.parts = []

    def add_part(self, part_name):
        self.parts.append(part_name)

    def remove_part(self, part_name):
        if part_name in self.parts:
            self.parts.remove(part_name)
            return True
        else:
            return False

    def list_parts(self):
        return self.parts

class BotHandler:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token, skip_pending=True)
        self.washing_machines = {}

    def start(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            self.bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=MarkupBuilder.main_markup())

        @self.bot.message_handler(func=lambda message: message.text == "üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É")
        def register_washing_machine(message):
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã:")
            self.bot.register_next_step_handler(message, self.process_brand_step)

        @self.bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â—É—é")
        def add_part(message):
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–π:")
            self.bot.register_next_step_handler(message, self.process_add_part_step)

        @self.bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â—É—é")
        def remove_part(message):
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            self.bot.register_next_step_handler(message, self.process_remove_part_step)

        @self.bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö")
        def list_parts(message):
            if not self.washing_machines:
                self.bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –ø—É—Å—Ç.")
                return
            if not message.chat.id in self.washing_machines:
                self.bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É'.")
                return
            washing_machine = self.washing_machines[message.chat.id]
            parts = washing_machine.list_parts()
            if parts:
                self.bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö:")
                for part in parts:
                    self.bot.send_message(message.chat.id, part)
            else:
                self.bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –ø—É—Å—Ç.")

        self.bot.polling()

    def process_brand_step(self, message):
        try:
            brand = message.text
            if not InputValidator.is_valid_brand(brand):
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—Ä–µ–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return self.register_washing_machine(message)
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã:")
            self.bot.register_next_step_handler(message, self.process_model_step, brand)
        except Exception as e:
            self.bot.reply_to(message, '–û—à–∏–±–∫–∞:\n' + str(e))

    def process_model_step(self, message, brand):
        try:
            model = message.text
            if not InputValidator.is_valid_model(model):
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return self.process_brand_step(message, brand)
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã:")
            self.bot.register_next_step_handler(message, self.process_serial_number_step, brand, model)
        except Exception as e:
            self.bot.reply_to(message, '–û—à–∏–±–∫–∞:\n' + str(e))

    def process_serial_number_step(self, message, brand, model):
        try:
            serial_number = message.text
            if not InputValidator.is_valid_serial_number(serial_number):
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return self.process_model_step(message, brand)
            self.washing_machines[message.chat.id] = WashingMachine(brand, model, serial_number)
            self.bot.send_message(message.chat.id, "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            self.bot.reply_to(message, '–û—à–∏–±–∫–∞:\n' + str(e))

    def process_add_part_step(self, message):
        try:
            part_name = message.text
            if not message.chat.id in self.washing_machines:
                self.bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É'.")
                return
            washing_machine = self.washing_machines[message.chat.id]
            washing_machine.add_part(part_name)
            self.bot.send_message(message.chat.id, f"–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∞—è '{part_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.")
        except Exception as e:
            self.bot.reply_to(message, '–û—à–∏–±–∫–∞:\n' + str(e))
            self.bot.register_next_step_handler(message, self.process_add_part_step)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω–æ–≤–∞

    def process_remove_part_step(self, message):
        try:
            part_name = message.text
            if not message.chat.id in self.washing_machines:
                self.bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É'.")
                return
            washing_machine = self.washing_machines[message.chat.id]
            if washing_machine.remove_part(part_name):
                self.bot.send_message(message.chat.id, f"–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∞—è '{part_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                self.bot.send_message(message.chat.id, f"–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–π '{part_name}' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                self.bot.register_next_step_handler(message, self.process_remove_part_step)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω–æ–≤–∞
                return
        except Exception as e:
            self.bot.reply_to(message, '–û—à–∏–±–∫–∞:\n' + str(e))
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            self.bot.register_next_step_handler(message, self.process_remove_part_step)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω–æ–≤–∞

if __name__ == "__main__":
    bot_handler = BotHandler(config.TOKEN)
    bot_handler.start()
